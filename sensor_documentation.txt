*****COLOR SENSOR*****

Exact Model: TCS230/TCS3200 Color Sensor
Link to sources: 
https://lastminuteengineers.com/tcs230-tcs3200-color-sensor-arduino-tutorial/#google_vignette
https://randomnerdtutorials.com/arduino-color-sensor-tcs230-tcs3200/

The sensor has for main colours: Red, Green, Blue, White

The pin order to activate and read the data from the photodiode sensors
are as follows:
Colour	|	S2	|	S3
Red		LOW		LOW
Blue		LOW		HIGH
Clear		HIGH		LOW
Green		HIGH		HIGH

The sensor also has four more control pins to control the output
frequency (i.e. the light sensitivity):
Output Frequency |	S0	|	S1
Power down(OFF)		LOW		LOW
2%			LOW		HIGH
20%			HIGH		LOW
100%			HIGH		HIGH
Most applications use 20% scaling, the output frequency ranges usually
from 2

INTERPRETING THE OUTPUT
The scaling factor scales the return baud rate by the percentage
e.g. input baud rate == 9600
output frequency: baud rate == 1600	Output range is (0-1600)

NOTE:
OUTPUT VALUES ARE INVERTED
1600 - 'absence' of __x__ light
0 - 'precense' of __x__ light

e.g. 
R=1179 G=719 B=223
i.e. there is a absence of red, absence of green, and presence of blue
Most likely colour: BLUE

NOTE: The stronger the light source, the less dispersion on the three
colour values.

PIN SETUP
// TCS230 or TCS3200 pins wiring to Arduino
#define S0 4
#define S1 5
#define S2 6
#define S3 7
#define sensorOut 8

note the PIN MODES should be activated as follows:
pinMode(S0, OUTPUT)
pinMode(S1, OUTPUT)
pinMode(S2, OUTPUT)
pinMode(S3, OUTPUT)
pinMode(sensorOut, INPUT)

IMPORTANT FUNCTIONS
void digitalwrite(__pin__, __mode__) 
	USED TO CHANGE the COLOUR read

int pulseIn(__input__, LOW)
	USE to return the sensed input
	
int map(__raw_input__, __rawMax__, __rawMin__, __mappedMax__, __mappedMin__)
converts the raw input to be proportionally converted as follows:
raw max --> mapped max
raw min --> mapped min


ULTRASONIC SENSOR

Exact Model: Ultrasonic Ranging Module HC-SR04
Links to sources:
https://cdn.sparkfun.com/datasheets/Sensors/Proximity/HCSR04.pdf?_gl=1*173x7lj*_ga*Mjg0NzcyNTQ1LjE3MDU1MzczOTU.*_ga_T369JS7J9N*MTcwNTUzNzM5NS4xLjAuMTcwNTUzNzM5NS42MC4wLjA.
https://www.instructables.com/Simple-Arduino-and-HC-SR04-Example/


Key parameters:
Voltage: 	  5	V DC
Current:  	 15	mA
Frequency:  	 40 	Hz
Max Range: 	400 	cm
Min Range:   	  2 	cm
Measuring angle: 15	degrees
Trigger signal:	 10	uS TTL pulse
Echo output:	 Range-modified by input lever signal
Accuracy:	  0.3	cm

CONNECT THE GROUND TO the module before connecting the power connection.
Failure to do so may result in damage.

CONNECT:
VCC to 5V power source
TRIG to the output trigger source (pin 13 in example)
ECHO to the arduino input pin (pin 12 in example)
GND to the general ground <-- CONNECT FIRST

to obtain data, you need to find the time interval between the trigger signal
and the receiving signal. The formula is uS / 58 for centimeters or 
uS / 148 for inches. Apply at LEAST a 60ms delay interval to prevent
signal interference.
or time * velocity / 2, given correct units for time and speed of sound,
which is 340 m/s by default

Operation: ultrasound signal is an 8 cycle burst at 40kHz.

INSTRUCTIONS TO OPERATE:
THE FOLLOWING CODE MUST BE USED IN SUCCESSION FOR THE SIGNAL TO WORK

TO GET A PING:

	digitalWrite(trigPin, LOW);
	delayMicroseconds(2); //use to clear/reset sensor
	digitalWrite(trigPin, HIGH);
	delayMicroseconds(10); //sends 10 uS trig pulse
	digitalWrite(trigPin, LOW); 
	long duration = pulseIn(echoPin, HIGH); //returns time interval for the signal to be returned
	long distance = duration / 58; //returns distance in CENTIMETERS
	//use duration / 148 to get inches


Sample setup:
#define trigPin 13
#define echoPin 12

pinMode(trigPin, OUTPUT);
pinMode(echoPin, INPUT);

